const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')

function Dialog({panel, current, vers, package }, protocol) {
    const css = style
    // icons
    let close = Graphic('./src/node_modules/assets/svg/close.svg', css.icon)
    
    // elements
    const cancel = bel`<button  class="${css.btn} ${css.cancel}" 
                                onclick=${() => actionHandler('cancel')}>
                                Cancel
                        </button>`
                        
    const submit = bel`<button  class="${css.btn} ${css.submit}" 
                                onclick=${() => actionHandler('submit')}>
                                Remove
                        </button>`

    const el = bel`
    <div class=${css.overlay}>
        <div class=${css.dialog}>
            <div class=${css["dialog-nav"]}>
                <button class="${css.btn} ${css.close}" onclick=${() => actionHandler('close')}>${close}</button>
            </div>
            <div class=${css["dialog-body"]}>
                <h3 class=${css.title}>Warning!</h3>
                <p class=${css.message}>Select v${vers} will be removed from ${package.title}.</p>
            </div>
            <div class=${css.actions}>
                ${cancel}
                ${submit}
            </div>
        </div>
    </div>
    `
    return el

    function actionHandler(target) {
        panel.classList.add( current )
        panel.removeAttribute('style')
        el.remove()
        
        if (target === 'submit') protocol()
            
        if (target === 'cancel') 
            console.log(`${package.title} v${vers} cancel remove`);
    }
}

const style = csjs`
.overlay {
    position: absolute;
    left: 0;
    top: 0;
    z-index: 999;
    width: 100%;
    height: 100%;
    display: grid;
    justify-items: center;
    align-items: center;
}
.dialog {
    width: 500px;
    max-width: 100%;
    background-color: white;
    border: var(--panelBorder) solid var(--panelCurrentBorderColor);
    padding-bottom: 2vh;
}
.dialog-nav {
    display: grid;
    grid-auto-flow: column;
    align-items: center;
    justify-items: right;
    border-bottom: var(--panelBorder) solid var(--panelCurrentBorderColor);
}
.dialog-nav .icon {
    display: grid;
    align-items: center;
}
.dialog-nav .icon svg {
    width: 20px;
}
.dialog-body {
    padding: 0 2vw 2vh 2vw;
}
.title {
    text-align: center;
    color: red;
}
.message {
    text-align: center;
}
.actions {
    text-align: right;
    padding: 0 2vw;
}
.actions .btn {
    display: inline-flex;
    align-items: center;
    outline: none;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: var(--dialogBtnFontSize);
    color: var(--btnColor);
    background-color: var(--btnBgColor);
    margin: 0;
    transition: color 0.45s, background-color 0.45s ease-in-out;
 }
 .actions .btn:hover {
     color: var(--btnHoverColor);
     background-color: var(--btnHoverBgColor);
 }
 .actions .btn:hover svg {
    fill: white;
}
.actions .cancel {
    margin-right: 1vw;
}
.actions .cancel:hover {
    background-color: var(--actionCancelHoverBgColor);
}
.actions .submit {
    color: #fff;
    background-color: var(--actionRemoveBgColor);
}
.actions .submit:hover {
    background-color: var(--actionRemoveHoverBgColor);
}
.close {
    
}
@media screen and (max-width: 812px) {
    .dialog {
        width: 70vw;
    }
}
@media screen and (max-width: 640px) {
    .dialog {
        width: 90vw;
    }
}
`

module.exports = Dialog