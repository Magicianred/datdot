const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')
const md = require('markdown-it')()
    .use(require('markdown-it-highlightjs'), {
        auto: true,
        code: true
    })

function AppInfo(package, protocol) {
    const css = style
    const {app, version} = package.sources
    let cors = 'https://cors-anywhere.herokuapp.com/'
    let path = package.url.slice(0, package.url.lastIndexOf("/"))

    // switch image type
    if (app.logo.includes("svg")) {
        var img = Graphic(`${cors}${path}/${app.logo}`, css["intro-logo"])
    } else {
        var img = bel`<img src="${path}/${app.logo}" alt=${app.title} />`
    }
    
    // icons
    let icon_info = Graphic('./src/node_modules/assets/svg/info.svg', css.icon)
    let icon_doc = Graphic('./src/node_modules/assets/svg/doc.svg', css.icon)
    let icon_settings = Graphic('./src/node_modules/assets/svg/settings.svg', css.icon)
    let icon_news = Graphic('./src/node_modules/assets/svg/news.svg', css.icon)
    let icon_about = Graphic('./src/node_modules/assets/svg/about.svg', css.icon)
    let icon_chat = Graphic('./src/node_modules/assets/svg/chat.svg', css.icon)
    let icon_supplyTree = Graphic('./src/node_modules/assets/svg/supply-tree.svg', css.icon)
    let icon_shrink = Graphic('./src/node_modules/assets/svg/double-arrow.svg', css.icon)
    
    // elements
    const shrinkAction = bel`<button class="${css.btn} ${css.shrink}">${icon_shrink}</button>`
    const content = bel`<div class=${css.content}></div>`
    const introHeader = bel`
    <div class=${css["intro-header"]}>
        ${img}
        <h4 class=${css["intro-title"]}>${app.title}</h4>
    </div>`
    
    let actions = bel`
    <aside class=${css.actions}>
        <button class="${css.btn} ${css.install}"> Install</button>
        <button class="${css.btn} ${css.remove}"> Rmove forever</button>
    </aside>
    `

    const appInfo = async (path, page, done) => {
        const cors = "https://cors-anywhere.herokuapp.com/"
        const regex = /^http/
        // for localhost using
        const url = package.url.match(regex) ? `${cors}${package.url}` : `${package.url}`
        // find the current path
        const link = url.slice(0, url.lastIndexOf('/'))
        const link1 = package.url.slice(0, package.url.lastIndexOf('/'))

        let intro = {
            title: app.title,
            logo: app.logo,
            version: app.versions.latest,
            versions: app.versions.all,
            content: `${link}/dist/${app.versions.latest}/${version.intro}`,
            maintainer: `${link1}/${app.about.maintainer}`
        }

        console.log(intro.maintainer);
    
        let docs = {
            version: app.versions.latest,
            versions: app.versions.all,
            content: `${link}/dist/${intro.version}/${version.intro}`
        }
    
        let news = {
            content: `${link}/dist/${intro.version}/${version.news}`
        }
    
        let settings = {
            content: ''
        }
    
        let about = {
            title: intro.title,
            content: `${link}/${app.about.info}`,
            contributors: `${link}/dist/${intro.version}/${version.contributors}`,
            wallet: app.about.wallet
        }
    
        let supplytree = {
            dependencies: version.supplytree.dependencies
        }

       

        try {

            if (page === "#info" || page === "#doc" ) {
                var fullLink = `${link}/dist/${package.version}/`
                var result = await fetch(`${fullLink}${path}`).then(res => res.text())
                let maintainerRes = await fetch(intro.maintainer).then(res => res.json())
                console.log(maintainerRes.name, maintainerRes.url);

            } else if (page === "#supplyTree") {
                var fullLink = `${link}/dist/${package.version}/`
                var result = await fetch(`${fullLink}${path}`)
            } else {
                var fullLink = `${link}/`
                var result = await fetch(`${fullLink}${path}`).then(res => res.text())
            }

            // console.log(result);
            return done(null, page, result)


        } catch (error) {
            done(error)
        }
        
    }
    
    appInfo(version.intro, '#info', loadPage)

    function loadPage(err, page, data) {
        const currentWindow = document.querySelector(`.app_${package.id}`)
        const content = currentWindow.querySelector(`.${css.content}`)
        // console.log(currentWindow);
        if (err) return console.log(err)
        // page content start
        const result = md.render(data)
        // if page includes below conditions, add hljs.css into head
        if (page === '#info' || page === '#doc' || page === '#about') {
            const hljsStyle = bel `<link href="./src/node_modules/assets/css/hljs.css" rel='stylesheet' type='text/css'>`
            document.head.appendChild(hljsStyle)
        }
        
        let article = bel`<article class=${css['app-info']}></article>`
        
        if (page === '#info') {
            article.appendChild(introHeader)
            article.appendChild(actions)
        }
        article.innerHTML += result
        content.innerHTML = ''
        content.appendChild(article)
    }

    const nav = bel ` 
    <nav class=${css.nav}>
        <a href="#info" class=${css.current} onclick=${()=>switchPageHandler('#info')}>${icon_info} Introduction</a>
        <a href="#doc" onclick=${()=>switchPageHandler('#doc')}>${icon_doc} Documentation</a>
        <a href="#settings" onclick=${()=>switchPageHandler('#settings')}>${icon_settings} Settings</a>
        <a href="#news" onclick=${()=>switchPageHandler('#news')}>${icon_news} News</a>
        <a href="#about" onclick=${()=>switchPageHandler('#about')}>${icon_about} About</a>
        <a href="#chat" onclick=${()=>switchPageHandler('#chat')}>${icon_chat} Support Chat</a>
        <a href="#supplyTree" onclick=${()=>switchPageHandler('#supplyTree')}>${icon_supplyTree} Supply tree</a>
    </nav>`


    shrinkAction.addEventListener('click', (e) => {
        const currentWindow = document.querySelector(`.app_${package.id}`)
        const container = currentWindow.querySelector(`.${css.container}`)
        container.classList.toggle(css.collapse)
    })


    const el = bel `
    <div class=${css.container}>
        <div class=${css.sidebar}>
            ${nav}
            ${shrinkAction}
        </div>
        ${content}
    </div>
    `
    return el



    function switchPageHandler(target) {
        // get all a tag name from nav
        const pages = nav.querySelectorAll('a')
        // switch current page
        pages.forEach(page => {
            if (page.getAttribute('href') === target) {
                page.classList.add(css.current)
                done(target)
            } else {
                page.classList.remove(css.current)
            }
        })
    }

    function done(target) {
        if (target === '#chat' ) {
            console.log("#chat page");
            return content.innerHTML = '<iframe src="https://gitter.im/wizardamigosinstitute/program/~embed" frameborder="0" allowfullscreen="allowfullscreen"></iframe>'
        } else if (target === '#doc') {
            console.log("#doc page");
            content.innerHTML = ''
            appInfo(version.doc, target, loadPage)
        }
        else if (target === '#settings') {
            console.log("#settings page");
            content.innerHTML = ''
        }
        else if (target === '#news') {
            console.log("#news page");
            content.innerHTML = ''
            appInfo(app.news, target, loadPage)
        }
        else if (target === '#about') {
            console.log("#about page");
            content.innerHTML = ''
            appInfo(app.about.info, target, loadPage)
        }
        else if (target === '#supplyTree') {
            console.log("#supplyTree page");
            content.innerHTML = '<h1>Suppy Tree</h1>'
        }
        else {
            console.log("#info page");
            content.innerHTML = ''
            appInfo(version.intro, target, loadPage)
        }
    }
}


const style = csjs `
.container {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 150px auto;
    height: 100%;
}
.sidebar {
    display: grid;
    grid-template-columns: 150px;
    grid-template-rows: auto 30px;
    grid-template-areas: 
    'nav'
    'shrink';
    background-color: var(--appInfoSidebarBgColor);
}
.collapse {
    grid-template-columns: 38px auto;
}
.collapse .sidebar {
    grid-template-columns: 38px;
    overflow: hidden;
}
.nav {
    grid-area: nav;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: repeat(auto-fit, 44px);
    grid-auto-flow: column;
}
.nav a {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 38px auto;
    align-items: center;
    font-size: var(--appInfoSidebarFontSize);
    color: var(--appInfoSidebarColor);
    text-decoration: none;
}
/* current page info */
.current {
    background-color: var(--appInfoSidebarNavCurrentBgColor);
}
.icon {
    
}
.btn {
   outline: none;
   padding: 8px 10px;
   border-radius: 4px;
   font-size: var(--btnFontSize);
   color: var(--btnColor);
   background-color: var(--btnBgColor);
}
.btn:hover {
    color: var(--btnHoverColor);
    background-color: var(--btnHoverBgColor);
}
.shrink {
    grid-area: shrink;
    background-color: var(--appInfoSidebarShrinkBgColor);
    border-radius: 0;
    padding: 5px 0;
    margin: 0;
}
.shrink:hover {
    background-color: var(--appInfoSidebarShrinkHoverBgColor);
}
.shrink .icon {
    display: grid;
    grid-template-columns: auto 30px;
}
.shrink .icon svg {
    transform: rotate(-180deg);
    grid-column-start: 2;
}
.collapse .shrink .icon {
    grid-template-columns: auto;
}
.collapse .shrink .icon svg {
    transform: rotate(0deg);
    grid-column-start: 1;
    grid-column-end: 2;
}
/* App info */
.content {
    height: calc( var(--contentHeight) );
    overflow: hidden;
    overflow-y: auto;
}
.app-info {
    padding: 0 20px;
}
.install {

}
.remove {

}
.content table {
    display: block;
    width: 100%;
    overflow: auto;
}

.content tr {
    background-color: #fff;
    border-top: 1px solid #c6cbd1;
}

.content table td,
.content table th {
    padding: 6px 13px;
    border: 1px solid #dfe2e5;
}
.content table tr:nth-child(2n) {
    background-color: #f6f8fa;
}
.actions {

}
.intro-header {

}
.intro-title {

}
.intro-logo {

}
@media screen and (max-width: 1024px) {
    .content {
        height: calc( 100vh - 29px - 4px);
    }
}
`

module.exports = AppInfo