const bel = require('bel')
const csjs = require('csjs-inject')
    // widgets
const Graphic = require('Graphic')
const md = require('markdown-it')()
    .use(require('markdown-it-highlightjs'), {
        auto: true,
        code: true
    })

function AppInfo(app, protocol) {
    const css = style
        // icons
    let info = Graphic('./src/node_modules/assets/svg/info.svg', css.icon)
    let doc = Graphic('./src/node_modules/assets/svg/doc.svg', css.icon)
    let settings = Graphic('./src/node_modules/assets/svg/settings.svg', css.icon)
    let news = Graphic('./src/node_modules/assets/svg/news.svg', css.icon)
    let about = Graphic('./src/node_modules/assets/svg/about.svg', css.icon)
    let chat = Graphic('./src/node_modules/assets/svg/chat.svg', css.icon)
    let supplyTree = Graphic('./src/node_modules/assets/svg/supply-tree.svg', css.icon)
    let shrink = Graphic('./src/node_modules/assets/svg/double-arrow.svg', css.icon)

    // elements
    const shrinkAction = bel `<button class="${css.btn} ${css.shrink}">${shrink}</button>`
    const content = bel `<div class=${css.content}></div>`

    fetch('./src/node_modules/assets/md/markdownit-demo.md')
        .then(res => res.text())
        .then(text => {
            const result = md.render(text)
            const node = bel `<article class=${css['app-info']}><button class="${css.btn} ${css.install}"> Install</button></article>`
            node.innerHTML += result
            const hljsStyle = bel `<link href="./assets/hljs.css" rel='stylesheet' type='text/css'>`
            document.head.appendChild(hljsStyle)
            content.appendChild(node)
        })

    const nav = bel ` 
    <nav class=${css.nav}>
        <a href="#info" class=${css.current} onclick=${()=>switchPageHandler('#info', done)}>${info} Introduction</a>
        <a href="#doc" onclick=${()=>switchPageHandler('#doc', done)}>${doc} Documentation</a>
        <a href="#settings" onclick=${()=>switchPageHandler('#settings', done)}>${settings} Settings</a>
        <a href="#news" onclick=${()=>switchPageHandler('#news', done)}>${news} News</a>
        <a href="#about" onclick=${()=>switchPageHandler('#about', done)}>${about} About</a>
        <a href="#chat" onclick=${()=>switchPageHandler('#chat', done)}>${chat} Support Chat</a>
        <a href="#supplyTree" onclick=${()=>switchPageHandler('#supplyTree', done)}>${supplyTree} Supply tree</a>
    </nav>`


    shrinkAction.addEventListener('click', () => {
        const container = document.querySelector(`.${css.container}`)
        const sidebar = document.querySelector(`.${css.sidebar}`)
        shrinkAction.classList.toggle(css.on)
        if (shrinkAction.classList.contains(css.on)) {
            container.style.gridTemplateColumns = '38px auto'
            sidebar.style.gridTemplateColumns = '38px'
            sidebar.style.overflow = 'hidden'
        } else {
            container.style.gridTemplateColumns = '150px auto'
            sidebar.style.gridTemplateColumns = '150px'
            sidebar.style.overflow = 'auto'
        }

    })


    const el = bel `
    <div class=${css.container}>
        <div class=${css.sidebar}>
            ${nav}
            ${shrinkAction}
        </div>
        ${content}
    </div>
    `
    return el



    function switchPageHandler(target) {
        // get all a tag name from nav
        const pages = nav.querySelectorAll('a')
            // switch current page
        pages.forEach(page => {
            if (page.getAttribute('href') === target) {
                page.classList.add(css.current)
                const content = el.querySelector(`.${css.content}`)

            } else {
                page.classList.remove(css.current)
            }
        })
    }
}



const style = csjs `
.container {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 150px auto;
    height: 100%;
    grid-gap: 0 20px;
}
.sidebar {
    display: grid;
    grid-template-columns: 150px;
    grid-template-rows: auto 30px;
    grid-template-areas: 
    'nav'
    'shrink';
    background-color: var(--appInfoSidebarBgColor);
}
.nav {
    grid-area: nav;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: repeat(auto-fit, 44px);
    grid-auto-flow: column;
}
.nav a {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 38px auto;
    align-items: center;
    font-size: var(--appInfoSidebarFontSize);
    color: var(--appInfoSidebarColor);
    text-decoration: none;
}
/* current page info */
.current {
    background-color: var(--appInfoSidebarNavCurrentBgColor);
}
.icon {
    justify-self: center;
}
.btn {
   outline: none;
}
.btn:hover {
    background-color: var(--appInfoSidebarShrinkHoverBgColor);
}
.shrink {
    grid-area: shrink;
    display: block;
    text-align: right;
    background-color: var(--appInfoSidebarShrinkBgColor);
}
.shrink .icon svg {
    transform: rotate(-180deg);
}
.on .icon svg {
    transform: rotate(0deg);
}
/* App info */
.content {
    padding-right: 20px;
    max-height: 735px;
    overflow: hidden;
    overflow-y: auto;
}
.app-info {

}
.install {

}

.content table {
    display: block;
    width: 100%;
    overflow: auto;
}

.content tr {
    background-color: #fff;
    border-top: 1px solid #c6cbd1;
}

.content table td,
.content table th {
    padding: 6px 13px;
    border: 1px solid #dfe2e5;
}
.content table tr:nth-child(2n) {
    background-color: #f6f8fa;
}
`

module.exports = AppInfo