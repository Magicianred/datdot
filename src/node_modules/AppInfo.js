const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')
const md = require('markdown-it')()
    .use(require('markdown-it-highlightjs'), {
        auto: true,
        code: true
    })

function AppInfo(app, protocol) {
    const css = style
    // icons
    let info = Graphic('./src/node_modules/assets/svg/info.svg', css.icon)
    let doc = Graphic('./src/node_modules/assets/svg/doc.svg', css.icon)
    let settings = Graphic('./src/node_modules/assets/svg/settings.svg', css.icon)
    let news = Graphic('./src/node_modules/assets/svg/news.svg', css.icon)
    let about = Graphic('./src/node_modules/assets/svg/about.svg', css.icon)
    let chat = Graphic('./src/node_modules/assets/svg/chat.svg', css.icon)
    let supplyTree = Graphic('./src/node_modules/assets/svg/supply-tree.svg', css.icon)
    let shrink = Graphic('./src/node_modules/assets/svg/double-arrow.svg', css.icon)

    // elements
    const shrinkAction = bel`<button class="${css.btn} ${css.shrink}">${shrink}</button>`
    const content = bel`<div class=${css.content}></div>`
    
    let actions = bel`
    <aside class=${css.actions}>
        <button class="${css.btn} ${css.install}"> Install</button>
        <button class="${css.btn} ${css.remove}"> Rmove forever</button>
    </aside>
    `

    const appInfo = async (path, page, done) => {
        try {
            const result = await fetch(path).then(res => res.text())
            return done(null, page, result)
        } catch (error) {
            done(error)
        }
        
    }
    
    appInfo('./src/node_modules/assets/md/markdownit-demo.md', '#info', loadPage)
    

    function loadPage(err, page, data) {
        // console.log({data})
        if (err) return console.log(err)
        // page content start
        const result = md.render(data)
        // if page includes below conditions, add hljs.css into head
        if (page === '#info' || page === '#doc') {
            const hljsStyle = bel `<link href="./src/node_modules/assets/css/hljs.css" rel='stylesheet' type='text/css'>`
            document.head.appendChild(hljsStyle)
        }
        
        let article = bel`<article class=${css['app-info']}></article>`
        
        if (page === '#info') {
            article.appendChild(actions)
        }
        article.innerHTML += result
        content.appendChild(article)
    }

    const nav = bel ` 
    <nav class=${css.nav}>
        <a href="#info" class=${css.current} onclick=${()=>switchPageHandler('#info')}>${info} Introduction</a>
        <a href="#doc" onclick=${()=>switchPageHandler('#doc')}>${doc} Documentation</a>
        <a href="#settings" onclick=${()=>switchPageHandler('#settings')}>${settings} Settings</a>
        <a href="#news" onclick=${()=>switchPageHandler('#news')}>${news} News</a>
        <a href="#about" onclick=${()=>switchPageHandler('#about')}>${about} About</a>
        <a href="#chat" onclick=${()=>switchPageHandler('#chat')}>${chat} Support Chat</a>
        <a href="#supplyTree" onclick=${()=>switchPageHandler('#supplyTree')}>${supplyTree} Supply tree</a>
    </nav>`


    shrinkAction.addEventListener('click', () => {
        const container = document.querySelector(`.${css.container}`)
        const sidebar = document.querySelector(`.${css.sidebar}`)
        shrinkAction.classList.toggle(css.on)
        if (shrinkAction.classList.contains(css.on)) {
            container.style.gridTemplateColumns = '38px auto'
            sidebar.style.gridTemplateColumns = '38px'
            sidebar.style.overflow = 'hidden'
        } else {
            container.style.gridTemplateColumns = '150px auto'
            sidebar.style.gridTemplateColumns = '150px'
            sidebar.style.overflow = 'auto'
        }

    })


    const el = bel `
    <div class=${css.container}>
        <div class=${css.sidebar}>
            ${nav}
            ${shrinkAction}
        </div>
        ${content}
    </div>
    `
    return el



    function switchPageHandler(target) {
        // get all a tag name from nav
        const pages = nav.querySelectorAll('a')
        // switch current page
        pages.forEach(page => {
            if (page.getAttribute('href') === target) {
                page.classList.add(css.current)
                done(target)
            } else {
                page.classList.remove(css.current)
            }
        })
    }

    function done(target) {
        if (target === '#chat' ) {
            console.log("#chat page");
            return content.innerHTML = '<iframe src="https://gitter.im/wizardamigosinstitute/program/~embed" frameborder="0" allowfullscreen="allowfullscreen"></iframe>'
        } else if (target === '#doc') {
            console.log("#doc page");
            content.innerHTML = ''
            appInfo('./src/node_modules/assets/md/githubusercontent.md', target, loadPage)
        }
        else if (target === '#settings') {
            console.log("#settings page");
            content.innerHTML = ''
        }
        else if (target === '#news') {
            console.log("#news page");
            content.innerHTML = ''
        }
        else if (target === '#about') {
            console.log("#about page");
            content.innerHTML = ''
        }
        else if (target === '#supplyTree') {
            console.log("#supplyTree page");
            content.innerHTML = ''
        }
        else {
            console.log("#info page");
            content.innerHTML = ''
            appInfo('./src/node_modules/assets/md/markdownit-demo.md', target, loadPage)
        }
    }
}



const style = csjs `
.container {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 150px auto;
    height: 100%;
}
.sidebar {
    display: grid;
    grid-template-columns: 150px;
    grid-template-rows: auto 30px;
    grid-template-areas: 
    'nav'
    'shrink';
    background-color: var(--appInfoSidebarBgColor);
}
.nav {
    grid-area: nav;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: repeat(auto-fit, 44px);
    grid-auto-flow: column;
}
.nav a {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 38px auto;
    align-items: center;
    font-size: var(--appInfoSidebarFontSize);
    color: var(--appInfoSidebarColor);
    text-decoration: none;
}
/* current page info */
.current {
    background-color: var(--appInfoSidebarNavCurrentBgColor);
}
.icon {
    justify-self: center;
}
.btn {
   outline: none;
   padding: 8px 10px;
   border-radius: 4px;
   font-size: var(--btnFontSize);
   color: var(--btnColor);
   background-color: var(--btnBgColor);
}
.btn:hover {
    color: var(--btnHoverColor);
    background-color: var(--btnHoverBgColor);
}
.shrink {
    grid-area: shrink;
    display: block;
    text-align: right;
    background-color: var(--appInfoSidebarShrinkBgColor);
}
.shrink:hover {
    background-color: var(--appInfoSidebarShrinkHoverBgColor);
}
.shrink .icon svg {
    transform: rotate(-180deg);
}
.on .icon svg {
    transform: rotate(0deg);
}
/* App info */
.content {
    max-height: 735px;
    overflow: hidden;
    overflow-y: auto;
}
.app-info {
    padding: 0 20px;
}
.install {

}
.remove {

}
.content table {
    display: block;
    width: 100%;
    overflow: auto;
}

.content tr {
    background-color: #fff;
    border-top: 1px solid #c6cbd1;
}

.content table td,
.content table th {
    padding: 6px 13px;
    border: 1px solid #dfe2e5;
}
.content table tr:nth-child(2n) {
    background-color: #f6f8fa;
}
.actions {

}
`

module.exports = AppInfo