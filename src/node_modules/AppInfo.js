const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')
const actions = require('actions')
const md = require('markdown-it')()
    .use(require('markdown-it-highlightjs'), {
        auto: true,
        code: true
    })

function AppInfo(url, title, package, protocol) {
    const css = style
    // load first version form data
    let vers  = package.versions.latest
    const path  = `${url}/dist/${vers}`
    const version = package.versions.all.map( v => bel`<option>${v}</option>`)

    // switch image type
    if (package.logo.includes("svg")) {
        var img = Graphic(`${url}/${package.logo}`, css["intro-logo"])
    } else {
        var img = bel`<img class=${css["intro-logo"]} src="${url}/${package.logo}" alt=${package.title} />`
    }

    // icons
    let icon_info = Graphic('./src/node_modules/assets/svg/info.svg', css.icon)
    let icon_doc = Graphic('./src/node_modules/assets/svg/doc.svg', css.icon)
    let icon_settings = Graphic('./src/node_modules/assets/svg/settings.svg', css.icon)
    let icon_news = Graphic('./src/node_modules/assets/svg/news.svg', css.icon)
    let icon_about = Graphic('./src/node_modules/assets/svg/about.svg', css.icon)
    let icon_chat = Graphic('./src/node_modules/assets/svg/chat.svg', css.icon)
    let icon_supplyTree = Graphic('./src/node_modules/assets/svg/supply-tree.svg', css.icon)
    let icon_shrink = Graphic('./src/node_modules/assets/svg/double-arrow.svg', css.icon)
    
    // elements
    const shrinkAction = bel`<button class="${css.btn} ${css.shrink}">${icon_shrink}</button>`
    const content = bel`<div class=${css.content}></div>`
    const introHeader = bel`<section class=${css["intro-header"]}></section>`
    const markdown = bel`<div class="markdown"></div>`
    const buttons = actions({title, vers, url, package})

    // sidebar menu
    const nav = bel ` 
    <nav class=${css.nav}>
        <a href="#intro" class=${css.current} onclick=${()=>switchPageHandler('#intro')}>${icon_info} Introduction</a>
        <a href="#doc" onclick=${()=>switchPageHandler('#doc')}>${icon_doc} Documentation</a>
        <a href="#settings" onclick=${()=>switchPageHandler('#settings')}>${icon_settings} Settings</a>
        <a href="#news" onclick=${()=>switchPageHandler('#news')}>${icon_news} News</a>
        <a href="#about" onclick=${()=>switchPageHandler('#about')}>${icon_about} About</a>
        <a href="#chat" onclick=${()=>switchPageHandler('#chat')}>${icon_chat} Support Chat</a>
        <a href="#supplyTree" onclick=${()=>switchPageHandler('#supplyTree')}>${icon_supplyTree} Supply tree</a>
    </nav>`

    // versions selector
    const selectVersion = bel`
    <div class=${css.selector}>
        <label>Version: </label>    
        <select onchange=${() => selectorHandler(event)}>
            ${version}
        </select>
    </div>`

    selectVersion.children[1].value = package.versions.latest

    // get version
    function selectorHandler(event) {
           const x = event.target.value
           vers = x
           return loadIntroVers(x)
    }

    // load intro version
    async function loadIntroVers(x) {
        const currentPanel = document.querySelector(`.app_${title}`)
        const currentActions = currentPanel.querySelector(`.${buttons.classList[0]}`)
        const path = `${url}/dist/${x}/${package.intro}`
        const file = await fetch(path).then(res => res.text())
        var result = md.render(file)
        currentActions.remove()
        introHeader.append( actions({title, vers, url, package}) )
        markdown.innerHTML = result
    }
    
    // display default page
    getInfo(package.intro, 'intro', loadPage)

    // collapse button
    shrinkAction.addEventListener('click', () => {
        const currentWindow = document.querySelector(`.app_${title}`)
        const container = currentWindow.querySelector(`.${css.container}`)
        container.classList.toggle(css.collapse)
    })

    const el = bel `
    <div class=${css.container}>
        <div class=${css.sidebar}>
            ${nav}
            ${shrinkAction}
        </div>
        ${content}
    </div>
    `
    return el

    // switch page
    function switchPageHandler(href) {
        // get all a tag name from nav
        const pages = nav.querySelectorAll('a')
        // switch current page
        pages.forEach(page => {
            if (page.getAttribute('href') === href) {
                page.classList.add(css.current)
                const target = href.split("#").slice(1).join('').toString()
                pageHandler(target)
            } else {
                page.classList.remove(css.current)
            }
        })
    }

    function pageHandler(i) {
        console.log(`${i} page loaded`);
        // clear content to add new contnet
        content.innerHTML = ''

        if (i === 'chat' ) {
            content.innerHTML = '<iframe src="https://gitter.im/wizardamigosinstitute/program/~embed" frameborder="0" allowfullscreen="allowfullscreen"></iframe>'
        } else if (i === 'about') {
            getInfo(package.about.info, i, loadPage)
        } else if (i === 'settings') {
        } else if (i === 'supplyTree') {
        } else {
            getInfo(package[i], i, loadPage)
        }
    }

    async function getInfo(file, page, done) {
        try {
            if (page === "intro") {
                var result = {
                    intro: await fetch(`${path}/${file}`).then(res => res.text()),
                    maintainer: await fetch(`${url}/${package.about.maintainer}`).then(res => res.json())
                }
            } else if (page === "doc" ) {
                var data
                if (vers === package.versions.latest) {
                    data = package.doc.includes('hackmd') 
                        ? package.doc
                        : `${url}/dist/${vers}/blob/v${vers}.md`
                    var result = await fetch(data).then(res => res.text())
                } else {
                    data = `${url}/dist/${vers}/blob/v${vers}.md`
                    var result = await fetch(data).then(res => res.text())
                }
                
            } else if (page === "supplyTree") {
                var result = await fetch(`${path}/${file}`)
            } else {
                var result = await fetch(`${url}/${file}`).then(res => res.text())
            }
            
            return done(null, page, result)

        } catch (error) {
            done(error)
        }
    }

    function loadPage(err, page, data) {
        const currentWindow = document.querySelector(`.app_${title}`)
        const content = currentWindow.querySelector(`.${css.content}`)
        let article = bel`<article class=${css['app-info']}></article>`
        if (err) return console.log(err)

        // page content start
        if (page === 'intro') {
            const { intro, maintainer } = data
            var result = md.render(intro)
            markdown.innerHTML = result
            // info 
            const info = bel`
            <div class=${css["intro-info"]}>
                ${img}
                <div class=${css["intro-content"]}>
                    <h4 class=${css["intro-title"]}>${package.title}</h4>
                    <a class=${css.link} href="${maintainer.url}" target="_blank">${maintainer.name}</a>
                </div>
            </div>`

            introHeader.innerHTML = ''
            introHeader.append(info, selectVersion, buttons)
            article.appendChild(introHeader)

        } else {
            var result = md.render(data)
            markdown.innerHTML = result
        }

        // if page includes below conditions, add hljs.css into head
        if (page === 'intro' || page === 'doc' || page === 'about') {
            const hljsStyle = bel `<link href="./src/node_modules/assets/css/hljs.css" rel='stylesheet' type='text/css'>`
            document.head.appendChild(hljsStyle)
        }
        
        article.append(markdown)
        content.innerHTML = ''
        content.appendChild(article)
    }

}


const style = csjs `
.container {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 150px auto;
    height: 100%;
}
.sidebar {
    display: grid;
    grid-template-columns: 150px;
    grid-template-rows: auto 30px;
    grid-template-areas: 
    'nav'
    'shrink';
    background-color: var(--appInfoSidebarBgColor);
}
.collapse {
    grid-template-columns: 38px auto;
}
.collapse .sidebar {
    grid-template-columns: 38px;
}
.nav {
    grid-area: nav;
    overflow: hidden;
    overflow-y: auto;
    max-height: calc( 75vh - 30px - 29px );
}
.nav a {
    display: grid;
    grid-template-rows: 44px;
    grid-template-columns: 38px auto;
    align-items: center;
    font-size: var(--appInfoSidebarFontSize);
    color: var(--appInfoSidebarColor);
    text-decoration: none;
}
.nav a:hover svg [class="b"], .nav a:hover svg [class="c"], .nav a:hover svg [class="a"]
{
    stroke: var(--linkHoverColor);
}
/* current page info */
.current {
    background-color: var(--appInfoSidebarNavCurrentBgColor);
}
.nav .icon {
    width: 18px;
    justify-self: center;
}
.shrink {
    grid-area: shrink;
    background-color: var(--appInfoSidebarShrinkBgColor);
    border-radius: 0;
    padding: 5px 0;
    margin: 0;
}
.shrink:hover {
    background-color: var(--appInfoSidebarShrinkHoverBgColor);
}
.shrink .icon {
    display: grid;
    grid-template-columns: auto 20px;
}
.shrink .icon svg {
    transform: rotate(-180deg);
    grid-column-start: 2;
    width: 16px;
}
.collapse .shrink .icon {
    grid-template-columns: auto;
    justify-items: center;
}
.collapse .shrink .icon svg {
    transform: rotate(0deg);
    grid-column-start: 1;
    grid-column-end: 2;
}
/* App info */
.content {
    height: calc( var(--contentHeight) );
    overflow: hidden;
    overflow-y: auto;
}
.app-info {
    position: relative;
    height: 100%;
    padding: 0 20px;
}
.download {

}
.remove {

}
.launch {

}
.pin {

}
.content table {
    display: block;
    width: 100%;
    overflow: auto;
}

.content tr {
    background-color: #fff;
    border-top: 1px solid #c6cbd1;
}

.content table td,
.content table th {
    padding: 6px 13px;
    border: 1px solid #dfe2e5;
}
.content table tr:nth-child(2n) {
    background-color: #f6f8fa;
}
.intro-header {
    display: grid;
    grid-template-rows: 1fr auto;
    grid-template-columns: auto 163px;
    grid-template-areas: "info selector"
                         "actions actions";
    padding-top: 20px;
}
.intro-info {
    grid-area: info;
    display: grid;
    grid-template: auto / 48px auto;
    grid-gap: 0px 10px;
}
.intro-content {
    grid-row-start: 1;
    grid-column-start: 2;
    padding-top: 5px;
}
.intro-title {
    margin: 0;
    font-weight: normal;
    font-size: var(--appInfoIntroTitleFontSize);
    align-self: center;
}
.intro-logo {

}
.link {
    font-size: var(--appInfoLinkFontSize);
}
.selector {
    grid-area: selector;
    justify-self: right;
    align-self: start;
}
.selector label {
    font-size: var(--appInfoSelectorFontSize);
}
select {
}
@media screen and (max-width: 1024px) {
    .content {
        height: calc( 100vh - 29px - 4px);
    }
}
`

module.exports = AppInfo