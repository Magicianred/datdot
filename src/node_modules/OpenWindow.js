const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')

function OpenWindow(app, content, protocol) {
    app.open = true
    let w = window.innerWidth
    let h = window.innerHeight
    const css = style
    let close = Graphic('./src/node_modules/assets/svg/close.svg', css.icon)
    let minmax = Graphic('./src/node_modules/assets/svg/minmax.svg', css.icon)
    const el = bel`
    <div class="${css.window} app_${app.id}">
        <header class=${css["panel-header"]}>
            <span class=${css["panel-title"]}>${app.title}</span>
            <div class=${css["panel-nav"]}>
                <button class="${css.btn} ${css.minmax}" onclick=${() => panelNav(event, "minmax")}>${minmax}</button>
                <button class="${css.btn} ${css.close}" onclick=${() => panelNav(event, "close")}>${close}</button>
            </div>
        </header>
        <div class=${css["panel-body"]}>
            ${content()}
        </div>
    </div>
    `
    if (w > 1024) {
        el.style.height = `${h - 240}px`
    } else {
        el.style.height = `100vh`
    }
    

    function panelNav(event, status) {
        event.preventDefault()
        if (status === 'close') {
            el.remove()
            app.open = false
            return protocol(el, app)
        }
        if (status === 'minmax') {

            let content = document.querySelector("[class^='content'")
            let h = window.innerHeight
            
            if (el.classList.contains(css.fullscreen)) {
                el.classList.remove(css.fullscreen)
                el.style.height = `${el.clientHeight - 240}px`
                content.style.height = `${el.clientHeight - 240 - 32}px`
            } else {
                el.classList.add(css.fullscreen)
                el.style.height = "100vh"
                content.style.height = "100%"
            }
        }
    }
    
    return protocol(el, app)
}



const style = csjs`
.window {
    position: absolute;
    z-index: 2;
    left: 50%;
    top: 50%;
    width: 960px;
    max-width: 100%;
    max-height: 100%;
    transform: translate(-50%, -50%);
    background-color: #d9d9d9;
    display: grid;
    grid-template: 29px auto / auto;
}
.panel-header {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: auto 65px;
    border: var(--panelBorder) solid var(--panelBorderColor);
    background-color: white;
    align-items: center;
}
.panel-nav {
    display: grid;
    grid-auto-flow: column;
    align-items: center;
}
.panel-title {
    font-size: var(--panelHeaderTitleSize);
    color: var(--panelHeaderTitleColor);
    text-align: center;
}
.panel-body {
    background-color: var(--panelBodyBgColor);
    border: var(--panelBorder) solid var(--panelBorderColor);
    border-top: 0;
    height: 100%;
}
.btn {
    padding: 0;
    align-items: center;
    justify-items: center;
}
.icon {
    
}
.fullscreen {
    width: 100vw;
    height: 100vh;
}
.minmax {
}
.close {
}
@media screen and (max-width: 1024px) {
    .window {
        width: 100%;
        height: 100%;
    }
    .panel-header {
        grid-template-columns: auto 30px;
    }
}
`

module.exports = OpenWindow