const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')

function OpenWindow(styl, url, package, content, protocol) {
    const css = style
    let title = package.title.split(' ').join('').toLowerCase()

    // icons
    let close = Graphic('./src/node_modules/assets/svg/close.svg', css.icon)
    let minmax = Graphic('./src/node_modules/assets/svg/minmax.svg', css.icon)
    
    const el = bel`
    <div class="${css.window} app_${title}" onclick=${ ()=> windowLevel(el)}>
        <header class=${css["panel-header"]}>
            <span class=${css["panel-title"]}>${package.title}</span>
            <div class=${css["panel-nav"]}>
                <button class="${css.btn} ${css.minmax}" onclick=${(e) => panelNav(e, "minmax")}>${minmax}</button>
                <button class="${css.btn} ${css.close}" onclick=${(e) => panelNav(e, "close")}>${close}</button>
            </div>
        </header>
        <div class=${css["panel-body"]}>
            ${content(styl, url, title, package, protocol)}
        </div>
    </div>
    `

    return protocol(el, package)

    function panelNav(event, status) {
        event.preventDefault()
        if (status === 'close') {
            el.remove()
            return protocol(el, package)
        }
        if (status === 'minmax') {
            let content = document.querySelector("[class^='content'")
            
            if (el.classList.contains(css.fullscreen)) {
                el.classList.remove(css.fullscreen)
                content.style.height = "calc( var(--contentHeight) )"
            } else {
                el.classList.add(css.fullscreen)
                content.style.height = "100%"
            }
        }
    }

    // set current window's level up to top
    function windowLevel(target) {
        if (target.classList.contains(styl)) return
        target.classList.add(styl)
    }
}



const style = csjs`
.window {
    position: absolute;
    z-index: 2;
    left: 50%;
    top: 50%;
    width: 960px;
    height: 75vh;
    max-width: 100%;
    max-height: 100%;
    transform: translate(-50%, -50%);
    display: grid;
    grid-template: 29px auto / auto;
}
.panel-header {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: auto 65px;
    border: var(--panelBorder) solid var(--panelBorderColor);
    background-color: var(--panelHeaderBgColor);
    align-items: center;
}
.panel-nav {
    display: grid;
    grid-auto-flow: column;
    align-items: center;
}
.panel-nav .icon svg {
    width: 20px;
}
.panel-title {
    font-size: var(--panelHeaderTitleSize);
    color: var(--panelHeaderTitleColor);
    text-align: center;
}
.panel-body {
    background-color: var(--panelBodyBgColor);
    border: var(--panelBorder) solid var(--panelBorderColor);
    border-top: 0;
    height: 100%;
}
.btn {
    padding: 0;
    align-items: center;
    justify-items: center;
}
.icon {
    
}
.fullscreen {
    width: 100%;
    height: 100%;
}
.minmax {
}
.close {
}
@media screen and (max-width: 1024px) {
    .window {
        width: 100%;
        height: 100%;
    }
}
`

module.exports = OpenWindow