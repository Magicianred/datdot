const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')
const Dialog = require('Dialog')

function actions({title, vers, package, url}) {
    let css = style

    // icons
    let icon_download = Graphic('./src/node_modules/assets/svg/download.svg', css.icon)
    let icon_launch = Graphic('./src/node_modules/assets/svg/launch.svg', css.icon)
    let icon_shortcut = Graphic('./src/node_modules/assets/svg/shortcut.svg', css.icon)
    let icon_remove = Graphic('./src/node_modules/assets/svg/remove.svg', css.icon)
    let icon_stop = Graphic('./src/node_modules/assets/svg/forcestop.svg', css.icon)

    // button actions
    let download = bel`<button  class="${css.btn} ${css.download}" 
                                onclick=${() => actionHandler(download)}>
                                ${icon_download}Download
                        </button>`

    let launch = bel`<button    class="${css.btn} ${css.launch}" 
                                onclick=${() => actionHandler(launch)}>
                                ${icon_launch}Launch
                    </button>`

    let shortcut = bel`<button  class="${css.btn} ${css.shortcut}" 
                                onclick=${() => actionHandler(shortcut)}>
                                ${icon_shortcut}Shortcut
                        </button>`

    let remove = bel`<button    class="${css.btn} ${css.remove}" 
                                onclick=${() => actionHandler(remove)}>
                                ${icon_remove}Remove
                    </button>`

    let stop = bel`<button      class="${css.btn} ${css.stop}" 
                                onclick=${() => actionHandler(stop)}>
                                ${icon_stop}Force stop
                    </button>`

    let v = bel`<span class=${css.vers}>${vers}</span>`
    
    let el = bel`<aside class=${css.actions}>${download}</aside>`

    return el

    // actions
    function actionHandler(el) {
        const currentPanel = document.querySelector(`.app_${title}`)
        const currentActions = currentPanel.querySelector(`.${css.actions}`)
        
        
        if (el.classList[1].includes('download')) {
            console.log(title, ' installed');
            currentActions.firstChild.remove()
            remove.append(v)
            currentActions.append(launch, shortcut, remove)
        }

        if (el.classList[1].includes('launch')) {
            console.log(title, 'is running');
            el.remove(launch)
            currentActions.insertBefore(stop, shortcut)
        }

        if (el.classList[1].includes('stop')) {
            console.log(title, 'is stopped')
        }

        if (el.classList[1].includes('shortcut')) {
            console.log(title, 'is pinned to desktop');
        }

        if (el.classList[1].includes('remove')) {
            console.log('remove ', title);

            document.body.append( Dialog(removeHandler) )
        }

        function removeHandler() {
            currentActions.innerHTML = ''
            currentActions.append(download)
        }
        
    }
    


    
}

const style = csjs`
.actions {
    grid-area: actions;
    margin-top: 15px;
}
.btn {
    display: inline-flex;
    align-items: center;
    outline: none;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: var(--actionBtnFontSize);
    color: var(--btnColor);
    background-color: var(--btnBgColor);
    margin: 5px 5px 0 0;
 }
 .btn:hover {
     color: var(--btnHoverColor);
     background-color: var(--btnHoverBgColor);
 }
 .btn:hover svg {
    fill: white;
}
.icon {
    margin-right: 5px;
    width: 20px;
}
.download {

}
.launch {

}
.shortcut {

}
.remove:hover {
    background-color: var(--actionRemoveBgColor);
}
.update {

}
.stop {

}
.vers {
    font-size: 1.2rem;
    color: black;
    background-color: white;
    padding: 4px 6px;
    margin-left: 5px;
    border-radius: 4px;
}
`

module.exports = actions