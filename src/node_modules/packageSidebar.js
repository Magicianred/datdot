const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')

function packageSidebar({title, container}, protocol) {
    const css = style
    // icons
    let icon_info = Graphic('./src/node_modules/assets/svg/info.svg', css.icon)
    let icon_doc = Graphic('./src/node_modules/assets/svg/doc.svg', css.icon)
    let icon_news = Graphic('./src/node_modules/assets/svg/news.svg', css.icon)
    let icon_chat = Graphic('./src/node_modules/assets/svg/chat.svg', css.icon)
    let icon_supplyTree = Graphic('./src/node_modules/assets/svg/supply-tree.svg', css.icon)
    let icon_shrink = Graphic('./src/node_modules/assets/svg/double-arrow.svg', css.icon)

    // buttons
    const shrinkAction = bel`<button class="${css.btn} ${css.shrink}">${icon_shrink}</button>`

    // sidebar menu
    const nav = bel ` 
    <nav class=${css.nav}>
        <a href="#package" class=${css.current} onclick=${()=>switchPageHandler('#package')}>${icon_info} Package</a>
        <a href="#doc" onclick=${()=>switchPageHandler('#doc')}>${icon_doc} Documentation</a>
        <a href="#news" onclick=${()=>switchPageHandler('#news')}>${icon_news} News</a>
        <a href="#chat" onclick=${()=>switchPageHandler('#chat')}>${icon_chat} Support Chat</a>
        <a href="#supplyTree" onclick=${()=>switchPageHandler('#supplyTree')}>${icon_supplyTree} Supply tree</a>
    </nav>`


    // collapse button
    shrinkAction.addEventListener('click', () => {
        const currentWindow = document.querySelector(`.app_${title}`)
        const el = currentWindow.querySelector(`.${container}`)
        el.classList.toggle(css.collapse)
    })

    const el = bel`
    <div class=${css.sidebar}>
        ${nav}
        ${shrinkAction}
    </div>
    `

    return el


    // switch page
    function switchPageHandler(href) {
        // get all a tag name from nav
        const pages = nav.querySelectorAll('a')
        // switch current page
        pages.forEach(page => {
            if (page.getAttribute('href') === href) {
                page.classList.add(css.current)
                const target = href.split("#").slice(1).join('').toString()
                protocol(target)
            } else {
                page.classList.remove(css.current)
            }
        })
    }
}


const style = csjs`
.sidebar {
    display: grid;
    grid-template-columns: 150px;
    grid-template-rows: auto 30px;
    grid-template-areas: 
    'nav'
    'shrink';
    background-color: var(--appInfoSidebarBgColor);
}
.collapse {
    grid-template-columns: 38px auto !important;
}
.collapse .sidebar {
    grid-template-columns: 38px;
}
.nav {
    grid-area: nav;
    overflow: hidden;
    overflow-y: auto;
    max-height: calc( 75vh - 30px - 29px );
}
.nav a {
    display: grid;
    grid-template-rows: 44px;
    grid-template-columns: 38px auto;
    align-items: center;
    font-size: var(--appInfoSidebarFontSize);
    color: var(--appInfoSidebarColor);
    text-decoration: none;
}
.nav a:hover svg [class="b"], .nav a:hover svg [class="c"], .nav a:hover svg [class="a"]
{
    stroke: var(--linkHoverColor);
}
/* current page info */
.current {
    background-color: var(--appInfoSidebarNavCurrentBgColor);
}
.nav .icon {
    width: 18px;
    justify-self: center;
}
.shrink {
    grid-area: shrink;
    background-color: var(--appInfoSidebarShrinkBgColor);
    border-radius: 0;
    padding: 5px 0;
    margin: 0;
}
.shrink:hover {
    background-color: var(--appInfoSidebarShrinkHoverBgColor);
}
.shrink .icon {
    display: grid;
    grid-template-columns: auto 20px;
}
.shrink .icon svg {
    transform: rotate(-180deg);
    grid-column-start: 2;
    width: 16px;
}
.collapse .shrink .icon {
    grid-template-columns: auto;
    justify-items: center;
}
.collapse .shrink .icon svg {
    transform: rotate(0deg);
    grid-column-start: 1;
    grid-column-end: 2;
}
`

module.exports = packageSidebar